# .github/workflows/ci.yml - Fixed CI/CD Pipeline for Playwright API Automation
name: Playwright API Automation Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  api-tests:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps
    
    - name: Run API connectivity check
      run: |
        curl -f https://jsonplaceholder.typicode.com/posts/1 || exit 1
        echo "✅ API endpoint is accessible"
    
    - name: Run Playwright Tests
      run: npx playwright test
      env:
        # Add any environment variables your tests need
        API_BASE_URL: https://jsonplaceholder.typicode.com
    
    - name: Upload Playwright Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.node-version }}
        path: playwright-report/
        retention-days: 30

  test-report:
    runs-on: ubuntu-latest
    needs: api-tests
    if: always()
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Setup Pages
      uses: actions/configure-pages@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./artifacts
    
    - name: Prepare GitHub Pages artifact
      run: |
        mkdir -p ./public
        # Copy the latest Node.js version report (20.x) as the main report
        if [ -d "./artifacts/playwright-report-20.x" ]; then
          cp -r ./artifacts/playwright-report-20.x/* ./public/
        else
          # Fallback to 18.x if 20.x not available
          cp -r ./artifacts/playwright-report-18.x/* ./public/
        fi
        
        # Create an index page with links to all reports
        cat > ./public/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Playwright Test Reports</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 40px; }
                .report-link { display: block; padding: 10px; margin: 10px 0; background: #f5f5f5; text-decoration: none; border-radius: 5px; }
                .report-link:hover { background: #e0e0e0; }
            </style>
        </head>
        <body>
            <h1>Playwright Test Reports</h1>
            <p>Latest test execution results:</p>
            <a href="./index.html" class="report-link">📊 Latest Test Report</a>
            <p><small>Generated: $(date)</small></p>
        </body>
        </html>
        EOF
    
    - name: Upload GitHub Pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: ./public
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

  validation-summary:
    runs-on: ubuntu-latest
    needs: api-tests
    if: always()
    
    steps:
    - name: Test Results Summary
      run: |
        echo "🎯 Playwright API Automation Pipeline Summary"
        echo "============================================="
        
        if [ "${{ needs.api-tests.result }}" = "success" ]; then
          echo "✅ API Tests: PASSED"
          echo "  - All Playwright tests executed successfully"
          echo "  - Tested on Node.js 18.x and 20.x"
          echo "  - API endpoints validated"
        else
          echo "❌ API Tests: FAILED"
          echo "  - Check the Playwright reports for details"
          echo "  - Review test logs in the api-tests job"
        fi
        
        echo ""
        echo "📊 Pipeline Status:"
        if [ "${{ needs.api-tests.result }}" = "success" ]; then
          echo "🚀 ALL CHECKS PASSED - Ready for deployment"
          echo "📋 Test report available at: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
        else
          echo "🔧 ISSUES FOUND - Review required"
          echo "📋 Check test artifacts and reports for details"
        fi
        
        # Set job status based on test results
        if [ "${{ needs.api-tests.result }}" != "success" ]; then
          exit 1
        fi